{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["TimerBox","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","teamName","running","time","startTime","_this2","timerID","setInterval","tick","oldTime","setState","oldStatus","console","log","i","_this3","react_default","a","createElement","className","class","App_TeamName","defaultName","onClick","startStop","adjustSeconds","Component","TeamName","_this4","value","name","defaultTeamName","customNameSet","handleChange","bind","assertThisInitialized","handleSubmit","event","target","preventDefault","onSubmit","type","placeholder","onChange","TimerScreen","App_TimerBox","App","App_TimerScreen","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gOAGMA,qBACJ,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,SAAUT,EAAMS,SAChBC,SAAS,EACTC,KAAMX,EAAMY,WALGX,mFASC,IAAAY,EAAAT,KAClBA,KAAKU,QAAUC,YACb,kBAAMF,EAAKG,QACX,oCAKF,GAAIZ,KAAKI,MAAME,QAAS,CACtB,IAAMO,EAAUb,KAAKI,MAAMG,KAC3BP,KAAKc,SAAS,CACZP,KAAMM,EAAQ,yCAMlB,IAAME,EAAYf,KAAKI,MAAME,QAC7BN,KAAKc,SAAS,CACZR,SAAUS,IAEZC,QAAQC,IAAIjB,KAAKI,MAAME,+CAGXY,GACZlB,KAAKc,SAAS,CACZP,KAAMP,KAAKI,MAAMG,KAAOW,qCAInB,IAAAC,EAAAnB,KACP,OACEoB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKE,MAAM,OACTJ,EAAAC,EAAAC,cAACG,EAAD,CAAUC,YAAa1B,KAAKJ,MAAM8B,eAEpCN,EAAAC,EAAAC,cAAA,OAAKE,MAAM,OACTJ,EAAAC,EAAAC,cAAA,OAAKE,MAAOxB,KAAKI,MAAME,QAAS,kBAAoB,qBAClDN,KAAKI,MAAMG,KAAK,EAAIP,KAAKI,MAAMG,KAAO,IAG1Ca,EAAAC,EAAAC,cAAA,OAAKE,MAAM,OACTJ,EAAAC,EAAAC,cAAA,OAAKE,MAAM,wBACTJ,EAAAC,EAAAC,cAAA,UAAQE,MAAM,SAASG,QAAS,kBAAMR,EAAKS,cACxC5B,KAAKI,MAAME,QAAU,OAAS,UAGnCc,EAAAC,EAAAC,cAAA,OAAKE,MAAM,sBACTJ,EAAAC,EAAAC,cAAA,UAAQE,MAAM,SAASG,QAAS,kBAAMR,EAAKU,cAAc,MAAzD,OAGAT,EAAAC,EAAAC,cAAA,UAAQE,MAAM,SAASG,QAAS,kBAAMR,EAAKU,eAAe,MAA1D,OAGAT,EAAAC,EAAAC,cAAA,UAAQE,MAAM,SAASG,QAAS,kBAAMR,EAAKU,cAAc,MAAzD,iBAhEWC,cA0EjBC,cACJ,SAAAA,EAAYnC,GAAM,IAAAoC,EAAA,OAAAlC,OAAAC,EAAA,EAAAD,CAAAE,KAAA+B,IAChBC,EAAAlC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAiC,GAAA5B,KAAAH,KAAMJ,KACDQ,MAAQ,CACX6B,MAAO,GACPC,KAAMtC,EAAMuC,gBACZC,eAAe,GAGjBJ,EAAKK,aAAeL,EAAKK,aAAaC,KAAlBxC,OAAAyC,EAAA,EAAAzC,QAAAyC,EAAA,EAAAzC,CAAAkC,KACpBA,EAAKQ,aAAeR,EAAKQ,aAAaF,KAAlBxC,OAAAyC,EAAA,EAAAzC,QAAAyC,EAAA,EAAAzC,CAAAkC,KATJA,4EAYLS,GACXzC,KAAKc,SAAS,CAACmB,MAAOQ,EAAMC,OAAOT,6CAGxBQ,GACXzB,QAAQC,IAAI,qBACZD,QAAQC,IAAIwB,GACZzC,KAAKc,SAAS,CACZoB,KAAMlC,KAAKI,MAAM6B,MACjBG,eAAe,IAEjBK,EAAME,kDAIN,OAAI3C,KAAKI,MAAMgC,cAEXhB,EAAAC,EAAAC,cAAA,WACGtB,KAAKI,MAAM8B,MAKdd,EAAAC,EAAAC,cAAA,QAAMsB,SAAU5C,KAAKwC,cACnBpB,EAAAC,EAAAC,cAAA,SAAOuB,KAAK,OAAOC,YAAa9C,KAAKJ,MAAM8B,YAAaqB,SAAU/C,KAAKqC,uBArC1DP,aA4CjBkB,mLAEF,OACE5B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAC2B,EAAD,CAAUzC,UAAW,GAAIkB,YAAY,WACrCN,EAAAC,EAAAC,cAAC2B,EAAD,CAAUzC,UAAW,GAAIkB,YAAY,WACrCN,EAAAC,EAAAC,cAAC2B,EAAD,CAAUzC,UAAW,GAAIkB,YAAY,WACrCN,EAAAC,EAAAC,cAAC2B,EAAD,CAAUzC,UAAW,GAAIkB,YAAY,mBAPnBI,aA0BXoB,mLAVX,OACE9B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,8BACAF,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAC6B,EAAD,cANUrB,aC3HEsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtC,EAAAC,EAAAC,cAACqC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.dc9dfdd9.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass TimerBox extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      teamName: props.teamName,\n      running: false,\n      time: props.startTime\n    }\n  }\n\n  componentDidMount() {\n    this.timerID = setInterval(\n      () => this.tick(),\n      1000\n    );\n  }\n\n  tick() {\n    if (this.state.running) {\n      const oldTime = this.state.time\n      this.setState({\n        time: oldTime-1\n      })\n    }\n  }\n\n  startStop() {\n    const oldStatus = this.state.running\n    this.setState({\n      running: !oldStatus\n    })\n    console.log(this.state.running)\n  }\n\n  adjustSeconds(i) {\n    this.setState({\n      time: this.state.time + i\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"box\">\n        <div class=\"row\">\n          <TeamName defaultName={this.props.defaultName}/>\n        </div>\n        <div class=\"row\">\n          <div class={this.state.running? \"time-box-active\" : \"time-box-inactive\"}>\n          \t{this.state.time>0 ? this.state.time : 0}\n          </div>\n        </div>\n        <div class=\"row\">\n          <div class=\"button-row-startstop\">\n            <button class=\"button\" onClick={() => this.startStop()}>\n              {this.state.running ? 'Stop' : 'Start'}\n            </button>\n          </div>\n          <div class=\"button-row-seconds\">\n            <button class=\"button\" onClick={() => this.adjustSeconds(20)}>\n              +20\n            </button>\n            <button class=\"button\" onClick={() => this.adjustSeconds(-20)}>\n              -20\n            </button>\n            <button class=\"button\" onClick={() => this.adjustSeconds(10)}>\n              +10\n            </button>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nclass TeamName extends Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      value: '',\n      name: props.defaultTeamName,\n      customNameSet: false\n    }\n\n    this.handleChange = this.handleChange.bind(this)\n    this.handleSubmit = this.handleSubmit.bind(this)\n  }\n\n  handleChange(event) {\n    this.setState({value: event.target.value})\n  }\n\n  handleSubmit(event){\n    console.log(\"Team name entered\")\n    console.log(event)\n    this.setState({\n      name: this.state.value,\n      customNameSet: true\n    })\n    event.preventDefault();\n  }\n\n  render(){\n    if (this.state.customNameSet) {\n      return (\n        <div>\n          {this.state.name}\n        </div>\n      )\n    } else {\n      return (\n        <form onSubmit={this.handleSubmit}>\n          <input type=\"text\" placeholder={this.props.defaultName} onChange={this.handleChange} />\n        </form>\n      )\n    }\n  }\n}\n\nclass TimerScreen extends Component {\n  render() {\n    return (\n      <div className=\"container\">\n        <TimerBox startTime={60} defaultName=\"Team 1\"/>\n        <TimerBox startTime={60} defaultName=\"Team 2\"/>\n        <TimerBox startTime={60} defaultName=\"Team 3\"/>\n        <TimerBox startTime={60} defaultName=\"Team 4\"/>\n      </div>\n\n    )\n  }\n}\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <h1> De SLIMSTE MENS</h1>\n        <h2> Ter Wereld</h2>\n        <TimerScreen />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}